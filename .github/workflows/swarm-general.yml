name: 🤖 SWARM General - Infrastructure Health & Deployment

on:
  # Trigger on worker file changes
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'workers/**'
      - 'wrangler.toml'
      - 'backend/**'
  
  # Trigger on pull requests
  pull_request:
    paths:
      - 'src/**'
      - 'workers/**'
      - 'wrangler.toml'
      - 'backend/**'
  
  # Scheduled health checks (every 30 minutes)
  schedule:
    - cron: '*/30 * * * *'
  
  # Manual trigger with options
  workflow_dispatch:
    inputs:
      deployment_type:
        description: 'Deployment type'
        required: true
        default: 'auto'
        type: choice
        options:
          - auto
          - force
          - health-check-only
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development

jobs:
  # Job 1: Pre-deployment health check
  pre-deployment-health:
    name: 🏥 Pre-Deployment Health Check
    runs-on: ubuntu-latest
    outputs:
      health_status: ${{ steps.health-check.outputs.status }}
      health_score: ${{ steps.health-check.outputs.score }}
      should_deploy: ${{ steps.health-check.outputs.should_deploy }}
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: 📦 Install dependencies
        run: npm install --no-save @octokit/rest axios
      
      - name: 🏥 Run Health Bot Check
        id: health-check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🏥 Running comprehensive health check..."
          
          # Run health bot
          node health-bot-vscode-integration.js > health-report.json 2>&1 || true
          
          # Check current worker health
          echo "🔍 Checking current worker endpoints..."
          
          # Test primary health endpoint
          HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://www.wiredchaos.xyz/health || echo "000")
          
          echo "Health endpoint status: $HEALTH_STATUS"
          
          # Determine if we should deploy based on health
          if [ "$HEALTH_STATUS" = "200" ] || [ "$HEALTH_STATUS" = "000" ]; then
            echo "✅ Health check passed or endpoint not yet deployed"
            echo "status=healthy" >> $GITHUB_OUTPUT
            echo "score=100" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Health check shows degraded state: $HEALTH_STATUS"
            echo "status=degraded" >> $GITHUB_OUTPUT
            echo "score=75" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          fi
      
      - name: 📊 Upload Health Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pre-deployment-health-report-${{ github.run_id }}
          path: health-report.json
          retention-days: 7

  # Job 2: Deploy Cloudflare Worker
  deploy-worker:
    name: 🚀 Deploy Cloudflare Worker
    runs-on: ubuntu-latest
    needs: pre-deployment-health
    if: |
      (github.event_name != 'schedule' && needs.pre-deployment-health.outputs.should_deploy == 'true') ||
      github.event.inputs.deployment_type == 'force'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: 📦 Install dependencies
        run: npm install
      
      - name: 🔍 Validate Worker Configuration
        run: |
          echo "🔍 Validating worker configuration..."
          
          if [ -f "src/wrangler.toml" ]; then
            echo "✅ Found wrangler.toml in src/"
            WRANGLER_PATH="src"
          elif [ -f "wrangler.toml" ]; then
            echo "✅ Found wrangler.toml in root"
            WRANGLER_PATH="."
          else
            echo "❌ wrangler.toml not found"
            exit 1
          fi
          
          echo "wrangler_path=$WRANGLER_PATH" >> $GITHUB_ENV
      
      - name: 🚀 Deploy Worker to Cloudflare
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy --env ${{ github.event.inputs.environment || 'production' }}
          workingDirectory: ${{ env.wrangler_path }}
      
      - name: ⏱️ Wait for deployment propagation
        run: |
          echo "⏱️ Waiting for deployment to propagate..."
          sleep 10
      
      - name: 📝 Log deployment
        run: |
          echo "## 🚀 Worker Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- Worker deployed successfully to Cloudflare Edge" >> $GITHUB_STEP_SUMMARY
          echo "- Configuration validated before deployment" >> $GITHUB_STEP_SUMMARY
          echo "- Propagation delay: 10 seconds" >> $GITHUB_STEP_SUMMARY

  # Job 3: Post-deployment health verification
  post-deployment-health:
    name: 🔍 Post-Deployment Health Verification
    runs-on: ubuntu-latest
    needs: [pre-deployment-health, deploy-worker]
    if: always() && needs.deploy-worker.result == 'success'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: 📦 Install dependencies
        run: npm install --no-save @octokit/rest axios
      
      - name: 🔍 Verify Worker Deployment
        id: verify
        run: |
          echo "🔍 Verifying worker deployment..."
          
          # Health check endpoints
          ENDPOINTS=(
            "https://www.wiredchaos.xyz/health"
            "https://wired-chaos-worker.wiredchaos.workers.dev/health"
          )
          
          ALL_PASSED=true
          PASSED_COUNT=0
          TOTAL_COUNT=${#ENDPOINTS[@]}
          
          echo "Testing ${TOTAL_COUNT} endpoints..."
          echo ""
          
          for ENDPOINT in "${ENDPOINTS[@]}"; do
            echo "Testing: $ENDPOINT"
            
            # Try up to 3 times with backoff
            SUCCESS=false
            for ATTEMPT in 1 2 3; do
              STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$ENDPOINT" || echo "000")
              
              if [ "$STATUS" = "200" ]; then
                echo "  ✅ Attempt $ATTEMPT: Success (HTTP $STATUS)"
                SUCCESS=true
                PASSED_COUNT=$((PASSED_COUNT + 1))
                break
              else
                echo "  ⚠️ Attempt $ATTEMPT: Failed (HTTP $STATUS)"
                if [ $ATTEMPT -lt 3 ]; then
                  sleep $((ATTEMPT * 2))
                fi
              fi
            done
            
            if [ "$SUCCESS" = "false" ]; then
              ALL_PASSED=false
              echo "  ❌ Endpoint failed all attempts"
            fi
            
            echo ""
          done
          
          echo "Results: $PASSED_COUNT/$TOTAL_COUNT endpoints passed"
          
          # Calculate health score
          HEALTH_SCORE=$((PASSED_COUNT * 100 / TOTAL_COUNT))
          echo "Health Score: $HEALTH_SCORE%"
          
          echo "health_score=$HEALTH_SCORE" >> $GITHUB_OUTPUT
          echo "passed_count=$PASSED_COUNT" >> $GITHUB_OUTPUT
          echo "total_count=$TOTAL_COUNT" >> $GITHUB_OUTPUT
          
          if [ $HEALTH_SCORE -ge 50 ]; then
            echo "status=healthy" >> $GITHUB_OUTPUT
            echo "✅ Post-deployment health check PASSED"
          else
            echo "status=unhealthy" >> $GITHUB_OUTPUT
            echo "❌ Post-deployment health check FAILED"
            exit 1
          fi
      
      - name: 📊 Health Summary
        if: always()
        run: |
          echo "## 🔍 Post-Deployment Health Verification" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Health Score:** ${{ steps.verify.outputs.health_score }}%" >> $GITHUB_STEP_SUMMARY
          echo "**Endpoints Tested:** ${{ steps.verify.outputs.passed_count }}/${{ steps.verify.outputs.total_count }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ steps.verify.outputs.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.verify.outputs.status }}" = "healthy" ]; then
            echo "✅ **Result:** All critical health checks passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Result:** Some health checks failed - auto-recovery initiated" >> $GITHUB_STEP_SUMMARY
          fi

  # Job 4: Auto-recovery and triage
  auto-recovery:
    name: 🔧 Auto-Recovery & Triage
    runs-on: ubuntu-latest
    needs: [deploy-worker, post-deployment-health]
    if: always() && needs.post-deployment-health.outputs.health_score < 80
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: 📦 Install dependencies
        run: npm install --no-save @octokit/rest axios
      
      - name: 🤖 Run SWARM Bot Triage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🤖 Initiating SWARM Bot auto-recovery..."
          
          # Run swarm bot in single-shot mode
          node swarm-bot-automation.js > swarm-recovery.log 2>&1 || true
          
          echo "📊 Triage complete"
      
      - name: 🔧 Attempt Auto-Fix
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "🔧 Attempting automatic recovery..."
          
          # Check if we should trigger a redeploy
          HEALTH_SCORE=${{ needs.post-deployment-health.outputs.health_score }}
          
          if [ $HEALTH_SCORE -lt 50 ]; then
            echo "⚠️ Critical failure detected - triggering emergency redeploy"
            
            # Trigger emergency deployment workflow
            gh workflow run emergency-production.yml \
              -f reason="Auto-recovery: Worker health check failed (score: $HEALTH_SCORE%)" \
              || echo "Failed to trigger emergency workflow"
          else
            echo "ℹ️ Health score $HEALTH_SCORE% - monitoring situation"
          fi
      
      - name: 📊 Upload Recovery Log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: auto-recovery-log-${{ github.run_id }}
          path: swarm-recovery.log
          retention-days: 7
      
      - name: 🚨 Create Recovery Issue
        if: needs.post-deployment-health.outputs.health_score < 50
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const healthScore = ${{ needs.post-deployment-health.outputs.health_score }};
            
            const issueBody = `# 🚨 Worker Deployment Health Failure
            
            **NO TOUCH INFRA**: Automated recovery has been initiated.
            
            ## Health Status
            
            - **Health Score:** ${healthScore}%
            - **Status:** Critical
            - **Workflow Run:** ${context.payload.repository.html_url}/actions/runs/${context.runId}
            - **Commit:** ${context.sha}
            
            ## Auto-Recovery Actions Taken
            
            1. ✅ SWARM Bot triage executed
            2. ✅ Emergency deployment workflow triggered
            3. ✅ Health monitoring activated
            
            ## Next Steps
            
            - ⏳ Wait for emergency deployment to complete
            - 🔍 Monitor health endpoints
            - 📊 Review deployment logs
            
            ## Health Endpoints
            
            - \`/health\` - Primary health check
            - \`/suite\` - Suite landing page
            - \`/tax\` - Tax landing page
            
            This issue will auto-close when health is restored.
            
            ---
            
            **WIRED CHAOS SWARM** - Automated Infrastructure Health System 🤖
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Worker Deployment Health Failure - Auto-Recovery Initiated',
              body: issueBody,
              labels: ['swarm-bot', 'deployment-health', 'auto-recovery', 'critical']
            });

  # Job 5: Integration health report
  integration-report:
    name: 📊 Integration Health Report
    runs-on: ubuntu-latest
    needs: [pre-deployment-health, deploy-worker, post-deployment-health]
    if: always()
    
    steps:
      - name: 📊 Generate Report
        run: |
          echo "## 📊 SWARM General - Infrastructure Health Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow:** SWARM General - Infrastructure Health & Deployment" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Health Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status | Score |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Pre-Deployment | ${{ needs.pre-deployment-health.outputs.health_status }} | ${{ needs.pre-deployment-health.outputs.health_score }}% |" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-worker.result }}" = "success" ]; then
            echo "| Deployment | ✅ Success | 100% |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.deploy-worker.result }}" = "skipped" ]; then
            echo "| Deployment | ⏭️ Skipped | N/A |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Deployment | ❌ Failed | 0% |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.post-deployment-health.result }}" = "success" ]; then
            echo "| Post-Deployment | ✅ Healthy | ${{ needs.post-deployment-health.outputs.health_score }}% |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.post-deployment-health.result }}" = "skipped" ]; then
            echo "| Post-Deployment | ⏭️ Skipped | N/A |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Post-Deployment | ⚠️ Issues | ${{ needs.post-deployment-health.outputs.health_score }}% |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### System Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Overall Health:** $(if [ "${{ needs.post-deployment-health.outputs.health_score || '100' }}" -ge "80" ]; then echo "✅ Healthy"; else echo "⚠️ Degraded"; fi)" >> $GITHUB_STEP_SUMMARY
          echo "- **Auto-Recovery:** $(if [ "${{ needs.auto-recovery.result }}" = "success" ]; then echo "✅ Completed"; elif [ "${{ needs.auto-recovery.result }}" = "skipped" ]; then echo "⏭️ Not Needed"; else echo "⚠️ In Progress"; fi)" >> $GITHUB_STEP_SUMMARY
          echo "- **No-Touch Infra:** ✅ Active" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Documentation" >> $GITHUB_STEP_SUMMARY
          echo "- [Deployment Guide](./DEPLOYMENT.md)" >> $GITHUB_STEP_SUMMARY
          echo "- [SWARM Bot Documentation](./SWARM_BOT_AUTOMATION.md)" >> $GITHUB_STEP_SUMMARY
          echo "- [Health Bot Integration](./HEALTH_BOT_INTEGRATION_SUMMARY.md)" >> $GITHUB_STEP_SUMMARY
