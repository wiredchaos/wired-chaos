name: SWARM Bot - Deployment Blocker Automation

on:
  schedule:
    # Run every 15 minutes
    - cron: '*/15 * * * *'
  
  workflow_dispatch:
    inputs:
      monitor_mode:
        description: 'Enable continuous monitoring'
        required: false
        type: boolean
        default: false
      interval:
        description: 'Monitoring interval (minutes)'
        required: false
        type: number
        default: 15

  # Trigger on new issues with blocking labels
  issues:
    types: [opened, labeled, reopened]

jobs:
  swarm-bot-triage:
    name: 🤖 SWARM Bot Triage
    runs-on: ubuntu-latest
    
    # Only run if issue has blocking labels or on schedule
    if: |
      github.event_name == 'schedule' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issues' && 
       (contains(github.event.issue.labels.*.name, 'deployment-blocker') ||
        contains(github.event.issue.labels.*.name, 'critical') ||
        contains(github.event.issue.labels.*.name, 'bug')))
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: 📦 Install dependencies
        run: |
          npm install --no-save @octokit/rest axios
      
      - name: 🤖 Run SWARM Bot
        id: swarm-bot
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          echo "🤖 Starting SWARM Bot automation..."
          
          if [ "${{ github.event.inputs.monitor_mode }}" = "true" ]; then
            echo "📊 Running in continuous monitoring mode"
            node swarm-bot-automation.js --monitor --interval=${{ github.event.inputs.interval || 15 }} &
            sleep 60
            pkill -f "node swarm-bot-automation.js"
          else
            echo "📊 Running single triage cycle"
            node swarm-bot-automation.js > swarm-bot-report.txt 2>&1
          fi
      
      - name: 📊 Upload Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: swarm-bot-report-${{ github.run_id }}
          path: swarm-bot-report.txt
          retention-days: 7
      
      - name: 💬 Comment on Issue (if triggered by issue)
        if: github.event_name == 'issues'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = context.issue.number;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: `🤖 **SWARM Bot** has been triggered for this issue.\n\nTriage is in progress. Check the workflow run for details:\n${context.payload.repository.html_url}/actions/runs/${context.runId}`
            });
      
      - name: 📢 Summary
        if: always()
        run: |
          echo "## 🤖 SWARM Bot Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f swarm-bot-report.txt ]; then
            echo "### Report Preview" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            head -50 swarm-bot-report.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ SWARM Bot executed successfully" >> $GITHUB_STEP_SUMMARY
          fi

  health-check:
    name: 🏥 System Health Check
    runs-on: ubuntu-latest
    needs: swarm-bot-triage
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: 📦 Install dependencies
        run: |
          npm install --no-save @octokit/rest axios
      
      - name: 🏥 Run Health Bot Check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🏥 Running Health Bot diagnostics..."
          node health-bot-vscode-integration.js > health-report.txt 2>&1 || true
      
      - name: 📊 Upload Health Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: health-report-${{ github.run_id }}
          path: health-report.txt
          retention-days: 7
      
      - name: 📢 Health Summary
        if: always()
        run: |
          echo "## 🏥 Health Bot Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f health-report.txt ]; then
            echo '```json' >> $GITHUB_STEP_SUMMARY
            cat health-report.txt | grep -A 20 "HEALTH DASHBOARD" | tail -20 >> $GITHUB_STEP_SUMMARY || echo "Health check completed" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

  notify-results:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [swarm-bot-triage, health-check]
    if: always()
    
    steps:
      - name: 📊 Workflow Status
        run: |
          echo "## 🎯 SWARM Bot Workflow Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Run ID:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review the SWARM Bot report artifact" >> $GITHUB_STEP_SUMMARY
          echo "2. Check escalated issues for manual intervention" >> $GITHUB_STEP_SUMMARY
          echo "3. Monitor Health Bot dashboard for system status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📚 [Documentation](./SWARM_BOT_AUTOMATION.md)" >> $GITHUB_STEP_SUMMARY
