{
  // WIRED CHAOS Debug Configurations
  // Use F5 to start debugging, or select a configuration from the debug dropdown
  "version": "0.2.0",
  "configurations": [
    // ========== Frontend Debugging ==========
    {
      "name": "Frontend: Chrome Debug",
      "type": "chrome",
      "request": "launch",
      "url": "http://localhost:3000",
      "webRoot": "${workspaceFolder}/frontend/src",
      "sourceMaps": true,
      "sourceMapPathOverrides": {
        "webpack:///src/*": "${webRoot}/*"
      },
      "preLaunchTask": "frontend:start-dev-server",
      "presentation": {
        "group": "frontend",
        "order": 1
      }
    },
    {
      "name": "Frontend: Edge Debug",
      "type": "msedge",
      "request": "launch",
      "url": "http://localhost:3000",
      "webRoot": "${workspaceFolder}/frontend/src",
      "sourceMaps": true,
      "sourceMapPathOverrides": {
        "webpack:///src/*": "${webRoot}/*"
      },
      "preLaunchTask": "frontend:start-dev-server",
      "presentation": {
        "group": "frontend",
        "order": 2
      }
    },

    // ========== Backend Debugging ==========
    {
      "name": "Backend: Main Server (Python)",
      "type": "node",
      "request": "launch",
      "program": "${workspaceFolder}/backend/server.py",
      "console": "integratedTerminal",
      "cwd": "${workspaceFolder}/backend",
      "env": {
        "PYTHONPATH": "${workspaceFolder}/backend"
      },
      "presentation": {
        "group": "backend",
        "order": 1
      }
    },
    {
      "name": "Backend: Brain Assistant API (Python)",
      "type": "node",
      "request": "launch",
      "program": "${workspaceFolder}/backend/brain_assistant_api.py",
      "console": "integratedTerminal",
      "cwd": "${workspaceFolder}/backend",
      "env": {
        "PYTHONPATH": "${workspaceFolder}/backend"
      },
      "presentation": {
        "group": "backend",
        "order": 2
      }
    },
    {
      "name": "Backend: Cert API (Python)",
      "type": "node",
      "request": "launch",
      "program": "${workspaceFolder}/backend/cert_api.py",
      "console": "integratedTerminal",
      "cwd": "${workspaceFolder}/backend",
      "env": {
        "PYTHONPATH": "${workspaceFolder}/backend"
      },
      "presentation": {
        "group": "backend",
        "order": 3
      }
    },
    {
      "name": "Backend: HRM/VRG System (Python)",
      "type": "node",
      "request": "launch",
      "program": "${workspaceFolder}/backend/hrm_vrg_system.py",
      "console": "integratedTerminal",
      "cwd": "${workspaceFolder}/backend",
      "env": {
        "PYTHONPATH": "${workspaceFolder}/backend"
      },
      "presentation": {
        "group": "backend",
        "order": 4
      }
    },

    // ========== Vault33 Gatekeeper Debugging ==========
    {
      "name": "Gatekeeper: Main (Python)",
      "type": "node",
      "request": "launch",
      "program": "${workspaceFolder}/vault33-gatekeeper/main.py",
      "console": "integratedTerminal",
      "cwd": "${workspaceFolder}/vault33-gatekeeper",
      "env": {
        "PYTHONPATH": "${workspaceFolder}/vault33-gatekeeper"
      },
      "presentation": {
        "group": "gatekeeper",
        "order": 1
      }
    },
    {
      "name": "Gatekeeper: API Server (Python)",
      "type": "node",
      "request": "launch",
      "program": "${workspaceFolder}/vault33-gatekeeper/api/server.py",
      "args": ["--reload", "--host", "0.0.0.0", "--port", "8080"],
      "console": "integratedTerminal",
      "cwd": "${workspaceFolder}/vault33-gatekeeper",
      "env": {
        "PYTHONPATH": "${workspaceFolder}/vault33-gatekeeper"
      },
      "presentation": {
        "group": "gatekeeper",
        "order": 2
      }
    },
    {
      "name": "Gatekeeper: Discord Bot (Python)",
      "type": "node",
      "request": "launch",
      "program": "${workspaceFolder}/vault33-gatekeeper/bots/discord_bot.py",
      "console": "integratedTerminal",
      "cwd": "${workspaceFolder}/vault33-gatekeeper",
      "env": {
        "PYTHONPATH": "${workspaceFolder}/vault33-gatekeeper"
      },
      "presentation": {
        "group": "gatekeeper",
        "order": 3
      }
    },
    {
      "name": "Gatekeeper: Telegram Bot (Python)",
      "type": "node",
      "request": "launch",
      "program": "${workspaceFolder}/vault33-gatekeeper/bots/telegram_bot.py",
      "console": "integratedTerminal",
      "cwd": "${workspaceFolder}/vault33-gatekeeper",
      "env": {
        "PYTHONPATH": "${workspaceFolder}/vault33-gatekeeper"
      },
      "presentation": {
        "group": "gatekeeper",
        "order": 4
      }
    },

    // ========== Python Testing ==========
    // Python test configs removed due to invalid properties

    // ========== SWARM Automation Debugging ==========
    {
      "name": "üöÄ SWARM: Bot Automation Debug",
      "type": "node",
      "request": "launch",
      "program": "${workspaceFolder}/swarm-bot-automation.js",
      "args": ["--debug", "--action=dev-test"],
      "cwd": "${workspaceFolder}",
      "console": "integratedTerminal",
      "env": {
        "NODE_ENV": "development",
        "DEBUG": "swarm:*"
      },
      "presentation": {
        "group": "swarm",
        "order": 1
      }
    },
    {
      "name": "‚ö° SWARM: Worker Debug (Local)",
      "type": "node",
      "request": "launch",
      "program": "${workspaceFolder}/node_modules/.bin/wrangler",
      "args": ["dev", "--local", "--port", "8787"],
      "cwd": "${workspaceFolder}/src",
      "console": "integratedTerminal",
      "env": {
        "NODE_ENV": "development"
      },
      "presentation": {
        "group": "swarm",
        "order": 2
      }
    },
    {
      "name": "üìä SWARM: Orchestrator Debug",
      "type": "node",
      "request": "launch",
      "program": "${workspaceFolder}/automation/swarm-orchestrator.js",
      "args": ["--monitor", "--debug"],
      "cwd": "${workspaceFolder}/automation",
      "console": "integratedTerminal",
      "env": {
        "DEBUG": "orchestrator:*"
      },
      "presentation": {
        "group": "swarm",
        "order": 3
      }
    },
    {
      "name": "üéÆ SWARM: Playground Frontend Debug",
      "type": "chrome",
      "request": "launch",
      "url": "http://localhost:3000/playground",
      "webRoot": "${workspaceFolder}/frontend/src",
      "sourceMaps": true,
      "sourceMapPathOverrides": {
        "webpack:///src/*": "${webRoot}/*"
      },
      "preLaunchTask": "üéÆ SWARM: Start Playground Dev Mode",
      "presentation": {
        "group": "swarm",
        "order": 4
      }
    },
    {
      "name": "üè™ SWARM: Marketplace Debug",
      "type": "chrome",
      "request": "launch",
      "url": "http://localhost:3000/marketplace",
      "webRoot": "${workspaceFolder}/frontend/src/components/marketplace",
      "sourceMaps": true,
      "presentation": {
        "group": "swarm",
        "order": 5
      }
    },

    // ========== Current File Debugging ==========
    // Python current file config removed due to invalid properties
  ],

  // ========== Compound Configurations ==========
  // Launch multiple debuggers at once
  "compounds": [
    {
      "name": "Full Stack: Frontend + Backend",
      "configurations": [
        "Frontend: Chrome Debug",
        "Backend: Main Server (Python)"
      ],
      "presentation": {
        "group": "compound",
        "order": 1
      }
    },
    {
      "name": "All Backend Services",
      "configurations": [
        "Backend: Main Server (Python)",
        "Backend: Brain Assistant API (Python)",
        "Backend: Cert API (Python)",
        "Backend: HRM/VRG System (Python)"
      ],
      "presentation": {
        "group": "compound",
        "order": 2
      }
    },
    {
      "name": "Vault33: All Services",
      "configurations": [
        "Gatekeeper: API Server (Python)",
        "Gatekeeper: Discord Bot (Python)",
        "Gatekeeper: Telegram Bot (Python)"
      ],
      "presentation": {
        "group": "compound",
        "order": 3
      }
    },
    {
      "name": "üéÆ SWARM: Full Playground Stack",
      "configurations": [
        "üéÆ SWARM: Playground Frontend Debug",
        "Backend: Main Server (Python)",
        "‚ö° SWARM: Worker Debug (Local)"
      ],
      "stopAll": true,
      "presentation": {
        "group": "swarm",
        "order": 1
      }
    },
    {
      "name": "ü§ñ SWARM: Complete Automation Debug",
      "configurations": [
        "üöÄ SWARM: Bot Automation Debug",
        "üìä SWARM: Orchestrator Debug",
        "‚ö° SWARM: Worker Debug (Local)"
      ],
      "stopAll": true,
      "presentation": {
        "group": "swarm",
        "order": 2
      }
    },
    {
      "name": "üè™ SWARM: Marketplace Full Stack",
      "configurations": [
        "üè™ SWARM: Marketplace Debug",
        "Backend: Main Server (Python)",
        "Gatekeeper: API Server (Python)"
      ],
      "stopAll": true,
      "presentation": {
        "group": "swarm",
        "order": 3
      }
    }
  ]
}
