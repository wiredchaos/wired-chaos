2) Client SDK

Create apps/web/lib/wc-bus.ts
export type WCEvent<T = unknown> = {
  type: string; actor: string; payload?: T; ts?: number; traceId?: string;
};
const BASE = process.env.NEXT_PUBLIC_BUS_BASE || "/api/bus";

export const WCBus = {
  async publish(event: WCEvent | WCEvent[]) {
    const res = await fetch(`${BASE}/publish`, {
      method: "POST",
      headers: { "content-type": "application/json" },
      body: JSON.stringify(event),
    });
    if (!res.ok) throw new Error(await res.text());
    return res.json();
  },
  async poll(params: { type?: string; since?: number; limit?: number }) {
    const q = new URLSearchParams();
    Object.entries(params).forEach(([k,v]) => v!=null && q.append(k, String(v)));
    const res = await fetch(`${BASE}/poll?${q}`, { cache: "no-store" });
    if (!res.ok) throw new Error(await res.text());
    return res.json();
  },
  async status() {
    const res = await fetch(`${BASE}/status`, { cache: "no-store" });
    if (!res.ok) throw new Error(await res.text());
    return res.json();
  },
}; 

3) Proxy routes → Cloudflare Worker

Create apps/web/app/api/bus/publish/route.ts

import { NextRequest } from "next/server";
export const runtime = "edge";

export async function POST(req: NextRequest) {
  const body = await req.text();
  const sign = await hmac(body, process.env.BUS_SECRET!);
  const res = await fetch(`${process.env.WORKER_BASE}/bus/publish`, {
    method: "POST",
    headers: { "content-type": "application/json", "x-bus-sign": sign },
    body
  });
  return new Response(await res.text(), { status: res.status, headers: res.headers });
}

async function hmac(payload: string, secret: string) {
  const key = await crypto.subtle.importKey("raw", new TextEncoder().encode(secret),
    { name: "HMAC", hash: "SHA-256" }, false, ["sign"]);
  const sig = await crypto.subtle.sign("HMAC", key, new TextEncoder().encode(payload));
  return Array.from(new Uint8Array(sig)).map(b=>b.toString(16).padStart(2,"0")).join("");
}

Create apps/web/app/api/bus/poll/route.ts

export const runtime = "edge";
export async function GET(req: Request) {
  const url = new URL(req.url);
  const res = await fetch(`${process.env.WORKER_BASE}/bus/poll?${url.searchParams}`);
  return new Response(await res.text(), { status: res.status, headers: res.headers });
}

Create apps/web/app/api/bus/status/route.ts

export const runtime = "edge";
export async function GET() {
  const res = await fetch(`${process.env.WORKER_BASE}/status`);
  return new Response(await res.text(), { status: res.status, headers: res.headers });
}


---

4) WL+XP Button (drop-in UI)

Create apps/web/components/WlXpButton.tsx

"use client";
import { useEffect, useMemo, useState } from "react";
import { WCBus } from "@/lib/wc-bus";

export default function WlXpButton({ actor: actorProp }: { actor?: string }) {
  const [actor, setActor] = useState(actorProp);
  const [xp, setXp] = useState(0);
  const [tier, setTier] = useState<"none"|"wl"|"og">("none");
  const [loading, setLoading] = useState(false);

  useEffect(()=>setActor(actorProp),[actorProp]);
  const connected = useMemo(()=>!!actor,[actor]);

  async function connect() {
    const a = window.prompt("Enter your wallet or user id")?.trim();
    if (a) setActor(a);
  }

  async function claim(delta=5) {
    if (!actor) return;
    setLoading(true);
    setXp(x=>x+delta);
    await fetch("/api/wlxp/claim",{
      method:"POST", headers:{ "content-type":"application/json" },
      body: JSON.stringify({ actor, delta, reason:"button-claim" })
    }).finally(()=>setLoading(false));
    refresh(actor);
  }

  async function refresh(a = actor!) {
    const res = await fetch(`/api/wlxp/profile?actor=${encodeURIComponent(a)}`, { cache:"no-store" });
    const d = await res.json();
    setXp(d.xp||0);
    setTier(d.tier||"none");
  }

  useEffect(()=>{ if(!actor) return; refresh(actor); const t=setInterval(()=>refresh(actor),10000); return ()=>clearInterval(t);},[actor]);

  return (
    <div className="flex flex-col gap-3 p-4 rounded-2xl border bg-black text-[#00FFFF] border-[#00FFFF]/40">
      <div className="flex justify-between"><b>WL + XP</b><span className={`h-2 w-2 rounded-full ${connected?"bg-[#00FFFF]":"bg-gray-500"}`} /></div>
      {!connected ? (
        <button onClick={connect} className="py-2 rounded-xl border border-[#00FFFF]">Connect Wallet</button>
      ) : (
        <>
          <div className="grid grid-cols-3 gap-3 text-center">
            <Metric label="XP" value={String(xp)} />
            <Metric label="Tier" value={tier.toUpperCase()} />
            <Metric label="Actor" value={actor} />
          </div>
          <button disabled={loading} onClick={()=>claim(5)} className="py-2 rounded-xl border border-[#00FFFF] disabled:opacity-60">
            Claim XP +5
          </button>
        </>
      )}
    </div>
  );
}
function Metric({label, value}:{label:string; value:string}) {
  return (
    <div className="rounded-xl border border-[#00FFFF]/30 p-2">
      <div className="text-xs text-[#00FFFF]/60">{label}</div>
      <div className="text-lg font-semibold">{value}</div>
    </div>
  );
}

Create apps/web/app/api/wlxp/claim/route.ts

import { NextRequest } from "next/server";
import { randomUUID } from "crypto";
export const runtime = "edge";

export async function POST(req: NextRequest) {
  const { actor, delta = 5, reason = "manual-claim" } = await req.json();
  if (!actor) return new Response(JSON.stringify({ ok:false, error:"missing-actor" }), { status: 400 });

  const event = { type: "wl.xp_gain", actor, payload:{ delta, reason }, ts: Date.now(), traceId: randomUUID() };
  const res = await fetch(`${process.env.NEXT_PUBLIC_BUS_BASE || "/api/bus"}/publish`, {
    method:"POST", headers:{ "content-type":"application/json" }, body: JSON.stringify(event)
  });
  return new Response(await res.text(), { status: res.status, headers: res.headers });
}

Create apps/web/app/api/wlxp/profile/route.ts

export const runtime = "edge";
export async function GET(req: Request) {
  const url = new URL(req.url);
  const actor = url.searchParams.get("actor");
  if (!actor) return new Response(JSON.stringify({ ok:false, error:"missing-actor" }), { status: 400 });

  const pollBase = process.env.NEXT_PUBLIC_BUS_BASE || "/api/bus";
  const res = await fetch(`${pollBase}/poll?type=wl.xp_gain&limit=1000`, { cache:"no-store" });
  if (!res.ok) return new Response(await res.text(), { status: res.status });

  const { events } = await res.json();
  const mine = (events as any[]).filter(e => e.actor === actor);
  const xp = mine.reduce((s, e) => s + Number(e?.payload?.delta || 0), 0);
  const tier = xp >= 500 ? "og" : xp >= 100 ? "wl" : "none";
  const last = mine.at(-1)?.ts ?? null;

  return new Response(JSON.stringify({ ok:true, actor, xp, tier, last, count: mine.length }), {
    headers: { "content-type": "application/json" },
  });
}


---

5) /bus Admin Monitor (visual)

Create apps/web/components/BusEventList.tsx

"use client";
import { useEffect, useState } from "react";

export default function BusEventList() {
  const [events, setEvents] = useState<any[]>([]);
  const [type, setType] = useState("");
  const [since, setSince] = useState(Date.now() - 3600_000);

  async function load() {
    const q = new URLSearchParams();
    if (type) q.set("type", type);
    q.set("since", String(since));
    q.set("limit", "100");
    const res = await fetch(`/api/bus/poll?${q}`, { cache:"no-store" });
    const data = await res.json();
    setEvents(data.events || []);
  }

  useEffect(()=>{ load(); const t=setInterval(load, 5000); return ()=>clearInterval(t);}, [type, since]);

  return (
    <div className="space-y-3">
      <div className="flex gap-2 items-end">
        <input value={type} onChange={e=>setType(e.target.value)} placeholder="type filter (e.g., wl.xp_gain)"
               className="flex-1 bg-black text-[#00FFFF] border border-[#00FFFF]/40 rounded px-3 py-2" />
        <button onClick={()=>setSince(Date.now()-3600_000)} className="border border-[#00FFFF] text-[#00FFFF] rounded px-3 py-2">Last 1h</button>
        <button onClick={()=>setSince(0)} className="border border-[#00FFFF]/40 text-[#00FFFF]/80 rounded px-3 py-2">All</button>
      </div>
      {events.map((e,i)=>(
        <div key={i} className="rounded-xl border border-[#00FFFF]/30 p-3 text-[#00FFFF] bg-black/70">
          <div className="text-xs text-[#00FFFF]/70">{new Date(e.ts).toLocaleString()}</div>
          <div className="font-semibold">{e.type}</div>
          <div className="text-xs opacity-80 break-all">actor {e.actor}</div>
          <pre className="text-xs whitespace-pre-wrap break-words opacity-90 mt-1">{JSON.stringify(e.payload, null, 2)}</pre>
        </div>
      ))}
    </div>
  );
}

Create apps/web/app/bus/page.tsx

export const dynamic = "force-dynamic";
import BusEventList from "@/components/BusEventList";

export default async function BusPage() {
  const res = await fetch(`${process.env.NEXT_PUBLIC_BUS_BASE || "/api/bus"}/status`, { cache:"no-store" });
  const status = await res.json();
  return (
    <main className="min-h-screen bg-black text-white p-6">
      <div className="max-w-3xl mx-auto space-y-6">
        <h1 className="text-2xl font-bold text-[#00FFFF]">WIRED CHAOS • Bus Monitor</h1>
        <div className="rounded-2xl border border-[#00FFFF]/40 p-4 bg-black/70">
          <pre className="text-[#00FFFF] text-xs">{JSON.stringify(status, null, 2)}</pre>
        </div>
        <div className="rounded-2xl border border-[#00FFFF]/40 p-4 bg-black/70">
          <BusEventList />
        </div>
      </div>
    </main>
  );
}


---

6) Add button to your homepage (optional quick demo)

Edit apps/web/app/page.tsx and render:

import WlXpButton from "@/components/WlXpButton";

export default function Home() {
  return (
    <main className="min-h-screen bg-black text-white p-6">
      <div className="max-w-md mx-auto">
        <WlXpButton />
      </div>
    </main>
  );
}


---

7) Deploy and test

1. Commit these files to GitHub.


2. Deploy your app (Cloudflare Pages or Vercel).


3. Visit:

/api/bus/status → should proxy to your Worker

/bus → live event viewer

Home page → Connect Wallet (enter any string) → Claim XP +5

Refresh /bus → see wl.xp_gain events





