name: ü§ñ Swarm Orchestration - Auto Deployment Trigger

on:
  issues:
    types: [closed]
  pull_request:
    types: [closed]
  workflow_dispatch:
    inputs:
      force_trigger:
        description: 'Force deployment trigger'
        required: false
        type: boolean
        default: false

jobs:
  check-and-trigger:
    name: ü§ñ Check & Trigger Deployment
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'issues' && github.event.issue.state == 'closed') ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true) ||
      (github.event_name == 'workflow_dispatch')
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
      
      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: üì¶ Install dependencies
        run: |
          npm install @octokit/rest
          echo "‚úÖ Dependencies installed"
      
      - name: üîç Check immediate actions status
        id: check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          node -e "
          const { Octokit } = require('@octokit/rest');
          const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
          
          async function checkStatus() {
            try {
              const { data: issues } = await octokit.issues.listForRepo({
                owner: '${{ github.repository_owner }}',
                repo: '${{ github.event.repository.name }}',
                state: 'open',
                labels: 'immediate-action,hotfix,critical-fix'
              });
              
              const immediateActions = issues.filter(issue => 
                issue.labels.some(l => ['immediate-action', 'hotfix', 'critical-fix'].includes(l.name))
              );
              
              console.log('Open immediate actions:', immediateActions.length);
              
              if (immediateActions.length === 0 || '${{ github.event.inputs.force_trigger }}' === 'true') {
                console.log('‚úÖ Ready for deployment');
                console.log('ready_for_deployment=true');
                require('fs').appendFileSync(process.env.GITHUB_OUTPUT, 'ready_for_deployment=true\n');
              } else {
                console.log('‚è≥ Immediate actions still pending');
                console.log('ready_for_deployment=false');
                require('fs').appendFileSync(process.env.GITHUB_OUTPUT, 'ready_for_deployment=false\n');
                require('fs').appendFileSync(process.env.GITHUB_OUTPUT, \`pending_count=\${immediateActions.length}\n\`);
              }
            } catch (error) {
              console.error('Error:', error.message);
              require('fs').appendFileSync(process.env.GITHUB_OUTPUT, 'ready_for_deployment=false\n');
            }
          }
          
          checkStatus();
          "
      
      - name: üöÄ Trigger deployment orchestration
        if: steps.check.outputs.ready_for_deployment == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log('üöÄ Triggering full deployment orchestration...');
            
            try {
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'deployment-orchestration.yml',
                ref: 'main',
                inputs: {
                  phase: 'all',
                  skip_tests: 'false'
                }
              });
              
              console.log('‚úÖ Deployment orchestration triggered successfully!');
              console.log('üéØ NO TOUCH INFRA: Full deployment pipeline activated');
            } catch (error) {
              console.error('‚ùå Failed to trigger deployment:', error.message);
              throw error;
            }
      
      - name: üìù Create deployment notification
        if: steps.check.outputs.ready_for_deployment == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueBody = `# üöÄ Automated Deployment Triggered
            
            **NO TOUCH INFRA**: Full deployment orchestration has been automatically triggered.
            
            ## Trigger Details
            
            - **Event:** ${{ github.event_name }}
            - **Triggered At:** ${new Date().toISOString()}
            - **Triggered By:** Swarm Bot Orchestrator
            - **Reason:** ${github.event_name === 'workflow_dispatch' ? 'Manual trigger' : 'All immediate actions completed'}
            
            ## Deployment Phases
            
            - ‚úÖ Phase 1: Foundation (Week 1)
              - Zapier Webhook Processor
              - Gamma API Integration
              - Wix AI Bot Configuration
              - Notion Database Connection
            
            - ‚úÖ Phase 2: Automation (Week 2)
              - 6 Core Workflows
              - Signup ‚Üí Deck Pipeline
              - Vault33 Gamification
              - Content Creation Automation
            
            - ‚úÖ Phase 3: Optimization (Week 3)
              - Performance Monitoring
              - A/B Testing Framework
              - AI Response Optimization
              - Auto-Scaling
            
            - ‚úÖ Phase 4: Advanced Features (Week 4)
              - Predictive Lead Scoring
              - Multi-Language Support
              - Analytics Dashboard
              - Enterprise Features
            
            ## Monitoring
            
            - **Actions:** [View Workflow Runs](https://github.com/${{ github.repository }}/actions)
            - **Logs:** Available in workflow artifacts
            - **Notifications:** Discord/Telegram alerts enabled
            
            ## What Happens Next
            
            1. ‚è≥ All phases execute sequentially
            2. üìä Performance metrics collected
            3. üß™ A/B tests initiated
            4. üìà Scaling automation activated
            5. üéâ Final deployment report generated
            
            ## NO TOUCH INFRA
            
            This deployment is fully automated. The system will:
            - Deploy all infrastructure components
            - Configure integrations automatically
            - Monitor performance and optimize
            - Scale successful workflows
            - Report completion status
            
            No manual intervention required unless errors occur.
            
            ---
            
            **WIRED CHAOS** - Automated Deployment System ü§ñ
            `;
            
            const { data: issue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üöÄ Automated Full Deployment Triggered',
              body: issueBody,
              labels: ['deployment', 'automated', 'swarm-bot', 'no-touch-infra']
            });
            
            console.log(`‚úÖ Deployment notification created: #${issue.number}`);
      
      - name: üí¨ Notify Discord
        if: steps.check.outputs.ready_for_deployment == 'true'
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          if [ -n "$DISCORD_WEBHOOK_URL" ]; then
            curl -X POST "$DISCORD_WEBHOOK_URL" \
              -H "Content-Type: application/json" \
              -d "{
                \"embeds\": [{
                  \"title\": \"üöÄ WIRED CHAOS - Full Deployment Triggered\",
                  \"description\": \"**NO TOUCH INFRA**: Automated deployment orchestration has been initiated.\",
                  \"color\": 3066993,
                  \"fields\": [
                    {
                      \"name\": \"Trigger Event\",
                      \"value\": \"${{ github.event_name }}\",
                      \"inline\": true
                    },
                    {
                      \"name\": \"Deployment Phase\",
                      \"value\": \"All Phases\",
                      \"inline\": true
                    },
                    {
                      \"name\": \"Status\",
                      \"value\": \"üü¢ Initiated\",
                      \"inline\": true
                    },
                    {
                      \"name\": \"Timeline\",
                      \"value\": \"Phase 1-4: ~4 weeks\",
                      \"inline\": false
                    }
                  ],
                  \"footer\": {
                    \"text\": \"WIRED CHAOS Automation\"
                  },
                  \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"
                }]
              }" || echo "‚ö†Ô∏è Discord notification failed"
            echo "‚úÖ Discord notification sent"
          fi
      
      - name: üì± Notify Telegram
        if: steps.check.outputs.ready_for_deployment == 'true'
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [ -n "$TELEGRAM_BOT_TOKEN" ] && [ -n "$TELEGRAM_CHAT_ID" ]; then
            MESSAGE="üöÄ *WIRED CHAOS - Full Deployment Triggered*\n\n‚úÖ NO TOUCH INFRA: Automated deployment orchestration initiated\n\nüìä *All 4 Phases*:\n- Phase 1: Foundation\n- Phase 2: Automation\n- Phase 3: Optimization\n- Phase 4: Advanced Features\n\nüîç Monitor progress in GitHub Actions"
            
            curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
              -d "chat_id=${TELEGRAM_CHAT_ID}" \
              -d "text=${MESSAGE}" \
              -d "parse_mode=Markdown" || echo "‚ö†Ô∏è Telegram notification failed"
            echo "‚úÖ Telegram notification sent"
          fi
      
      - name: ‚è≥ Waiting for completion
        if: steps.check.outputs.ready_for_deployment == 'false'
        run: |
          echo "‚è≥ Deployment delayed - immediate actions still pending"
          echo "Pending actions: ${{ steps.check.outputs.pending_count }}"
          echo ""
          echo "Deployment will auto-trigger when all immediate actions are complete."
          echo "ü§ñ Swarm Bot will monitor and trigger automatically."
      
      - name: üìä Summary
        run: |
          if [ "${{ steps.check.outputs.ready_for_deployment }}" = "true" ]; then
            cat <<EOF
          
          ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
          üéâ DEPLOYMENT ORCHESTRATION TRIGGERED
          ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
          
          ‚úÖ All immediate actions complete
          ‚úÖ Full deployment pipeline initiated
          ‚úÖ NO TOUCH INFRA activated
          
          üìä Monitor progress:
             https://github.com/${{ github.repository }}/actions
          
          üéØ Expected completion: ~4 weeks (all phases)
          
          ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
          EOF
          else
            cat <<EOF
          
          ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
          ‚è≥ DEPLOYMENT DELAYED
          ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
          
          ‚è≥ Pending immediate actions: ${{ steps.check.outputs.pending_count }}
          ü§ñ Swarm Bot monitoring for completion
          üöÄ Auto-trigger enabled
          
          Deployment will start automatically when ready.
          
          ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
          EOF
          fi
